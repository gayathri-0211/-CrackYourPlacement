class Solution {
public:

    int func(vector<int> &prices, int ind, vector<vector<int>> &dp,int buy){

        if(ind==prices.size()) return 0;

        if(dp[ind][buy] !=-1) return dp[ind][buy];
        int profit = 0;
        if(buy==1){
            profit = max(-prices[ind]+func(prices,ind+1,dp,0), 0+func(prices,ind+1,dp,1));
        }
        else{
            profit = max(prices[ind]+func(prices,ind+1,dp,1),0+func(prices,ind+1,dp,0));
        }
        return dp[ind][buy] = profit;
    }

    int maxProfit(vector<int>& prices) {
        vector<vector<int>> dp(prices.size()+1, vector<int> (2, -1));
        // dp[prices.size()][1] = 0;
        // dp[prices.size()][0] = 0;
        // for(int ind =prices.size()-1; ind>=0; ind--){
        //     for(int buy = 0; buy<=1; buy++){
        //         if(buy==1){
        //             dp[ind][buy] = max(-prices[ind]+dp[ind+1][0], 0+dp[ind+1][1]);
        //         }
        //         else{
        //             dp[ind][buy] = max(prices[ind]+dp[ind+1][1], 0+dp[ind+1][0]);
        //         }
        //     }
        // }
        return func(prices,0,dp,1);
    }
};
